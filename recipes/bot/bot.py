from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot, InputMediaPhoto, InputMedia, InputFile, BotCommand
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler, ConversationHandler
from recipes.models import Recipes
from recipes.bot.keyboard import START_KEYBOARD, SUBSCRIPTION
from environs import Env
from config.settings import BOT_TOKEN, MEDIA_ROOT, BASE_DIR
from recipes import handlers
import datetime
import os
from pathlib import Path

INGREDIENTS = []
PREVIOUS_INGREDIENT_NUMBER = 0
NUMBER_RECIPE_CHANGES = 2
TODAY = {}

bot = Bot(token=BOT_TOKEN)


def start(context: CallbackContext):
    global INGREDIENTS
    global NUMBER_RECIPE_CHANGES

    if NUMBER_RECIPE_CHANGES > 0:
        recipe = Recipes.objects.order_by('?').first()
        title = recipe.title
        image = recipe.image
        categories = ", ".join([cat.title for cat in recipe.category.all()]) if recipe.category.all() else "None"
        context.bot.send_photo(chat_id=context.job.context, photo=image)
        context.bot.send_message(
            chat_id=context.job.context,
            text=f'<b>{title}\n\n</b>'
                 f'<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {categories}',
            reply_markup=START_KEYBOARD,
            parse_mode='HTML'
        )
        context.bot.send_message(
            chat_id=context.job.context,
            text='–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞? üçî ü´§\n\n'
                 '–û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É, –∏ –º—ã –ø–æ–±–µ—Å–ø–æ–∫–æ–∏–º—Å—è –∑–∞ –≤–∞—Å ‚¨áÔ∏è',
            reply_markup=SUBSCRIPTION)

        INGREDIENTS.append(recipe)
    else:
        context.bot.send_message(
            chat_id=context.job.context,
            text='–í—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö —Ä–∞–∑ –∑–∞ —Å—É—Ç–∫–∏!\n\n'
                 '<b>–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ –º–∞–∫—Å–∏–º—É–º—É, –∞ —Ç–∞–∫–∂–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é?\n\n</b>'
                 '–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å ‚¨áÔ∏è',
            reply_markup=SUBSCRIPTION,
            parse_mode='HTML')


def restart(update, context):
    update.message.reply_text("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
    context.user_data.clear()
    return start(update, context)


def get_another_dish(update: Update, _):
    """–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç."""
    global INGREDIENTS
    global NUMBER_RECIPE_CHANGES
    global TODAY

    query = update.callback_query
    query.answer()

    if TODAY == {} or datetime.datetime.now().date() > TODAY['today']:
        NUMBER_RECIPE_CHANGES = 2

    if NUMBER_RECIPE_CHANGES > 0:
        TODAY['today'] = datetime.datetime.now().date()
        recipe = Recipes.objects.order_by('?').first()
        #recipe_id = recipe.pk
        title = recipe.title
        image = recipe.image
        categories = ", ".join([cat.title for cat in recipe.category.all()]) if recipe.category.all() else "None"



        query.message.reply_photo(image)
        query.message.reply_text(
            f'<b>{title}\n\n</b>'
            f'<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {categories}',
            reply_markup=START_KEYBOARD,
            parse_mode='HTML'
        )

        # img_path = os.path.join(BASE_DIR, MEDIA_ROOT, image)
        # print(img_path)
        #
        # with open(img_path, 'rb') as file:
        #     photo = InputMediaPhoto(file)
        #
        # bot.edit_message_media(
        #     chat_id=query.from_user.id,
        #     message_id=query.message.message_id,
        #     media=photo
        # )
        # query.message.edit_media(
        #     media=InputMediaPhoto(photo
        # )
        query.message.reply_text(
            '–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞? üçî ü´§\n\n'
            '–û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É, –∏ –º—ã –ø–æ–±–µ—Å–ø–æ–∫–æ–∏–º—Å—è –∑–∞ –≤–∞—Å ‚¨áÔ∏è',
            reply_markup=SUBSCRIPTION)
        INGREDIENTS.append(recipe)
        NUMBER_RECIPE_CHANGES -= 1
    else:
        query.message.reply_text('–í—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö —Ä–∞–∑ –∑–∞ —Å—É—Ç–∫–∏!\n\n'
                                 '<b>–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ –º–∞–∫—Å–∏–º—É–º—É, –∞ —Ç–∞–∫–∂–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é?\n\n</b>'
                                 '–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å ‚¨áÔ∏è',
                                 reply_markup=SUBSCRIPTION,
                                 parse_mode='HTML')


# def get_previous_dish(update: Update):
#     """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –±–ª—é–¥–æ."""
#     if PREVIOUS_INGREDIENT_NUMBER == 0:
#         pass
#     else:
#         dish_last_number =

def get_dish_ingredients(update: Update, _):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –±–ª—é–¥–∞."""
    recipe = INGREDIENTS[-1]
    ingredients = recipe.ingredients.all()
    ingredients_title = [f'{ingredient.title}\n' for ingredient in ingredients]
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        f'{recipe.title.upper()}\n\n<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n\n{"".join(ingredients_title)}\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ üòã',
        reply_markup=START_KEYBOARD,
        parse_mode='HTML')


def start_recipe(update, context):
    context.job_queue.run_repeating(start, interval=datetime.timedelta(seconds=86400), first=1,
                                    context=update.message.chat_id)


def main():
    bot.set_my_commands(
        [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"),
            BotCommand("menu", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –≤–∞—à–∏–º –ø–ª–∞–Ω–æ–º")
        ]
    )
    global TODAY
    global NUMBER_RECIPE_CHANGES

    env = Env()
    env.read_env()

    updater = Updater(token=BOT_TOKEN)

    subscribers_menu_handler = ConversationHandler(
        entry_points=[CommandHandler('menu', handlers.show_user_menu)],
        states={
            handlers.BUTTON_HANDLING: [CallbackQueryHandler(handlers.button_handling)],
        },
        fallbacks=[CommandHandler('restart', restart)]
    )

    subscription_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handlers.start_subscription, pattern='subscribe')],
        states={
            # handlers.EXCLUDE_INGREDIENTS: [CallbackQueryHandler(handlers.exclude_ingredients)],
            # handlers.EXCLUDE_INGREDIENTS_HANDLING: [CallbackQueryHandler(handlers.exclude_ingredients_handling)],
            handlers.CHOOSE_SUB_LENGTH: [CallbackQueryHandler(handlers.choose_sub_length)],
            handlers.FINISH_SUBSCRIBING: [CallbackQueryHandler(handlers.finish_subscribing)],
        },
        fallbacks=[CommandHandler('restart', restart)]
    )

    dp = updater.dispatcher
    dp.add_handler(CommandHandler('start', start_recipe))
    dp.add_handler(CallbackQueryHandler(get_another_dish, pattern='another_dish'))
    dp.add_handler(CallbackQueryHandler(get_dish_ingredients, pattern='dish_ingredients'))
    dp.add_handler(CommandHandler('restart', restart))
    dp.add_handler(subscribers_menu_handler)
    dp.add_handler(subscription_handler)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
